CheckerWeb.CheckerGame.red_moves(0, false)
CheckerWeb.CheckerGame.red_moves(0, true)
CheckerWeb.CheckerGame.black_moves(0, true)

Enum.filter([0, 1, 8, 9], &CheckerWeb.CheckerGame.pos_filter(&1, 1, 5))
Enum.filter([8, 9], &CheckerWeb.CheckerGame.pos_filter(&1, 1, 5))
Enum.filter([10, 11], &CheckerWeb.CheckerGame.pos_filter(&1, 1, 5))

GenServer>>>>>>>>>>>>>>>>>>>>>>>
{:ok, pid} = Checker.Room.Supervisor.create_game(1)

x = %CheckerWeb.CheckerGame{}

// Just something like {:get_data, _xx, _pid}
CheckerWeb.CheckerGame.handle_call(:get_data, nil, x)
// return
{:reply, reply, new_state}
{:noreply, new_state}


server = CheckerWeb.CheckerGame.ref(1)
Elixir.GenServer.stop(server)
Supervisor.terminate_child(__MODULE__, 1) // not work

// When you call a function in a gen_server module, the function is not executed in the gen_server process.
// It is executed in the caller process.

GenServer.call(pid, :get_data)
user_id = 1
GenServer.call(pid, {:join, 1, pid})
GenServer.call(pid, {:join, 2, pid})
GenServer.call(pid, {:join, 3, pid})


{:join, user_id, pid}


{:ok, pid} = Checker.Room.Supervisor.create_game(3)
Checker.Room.Supervisor.current_games
ref_1 = CheckerWeb.CheckerGame.ref(1)
GenServer.call(ref_1, :get_data)
